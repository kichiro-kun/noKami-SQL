# -*- coding: utf-8 -*-

"""
Реализации типов записей журнала для различных уровней логирования.

Этот модуль содержит конкретные реализации LogEntryDTO для всех стандартных
уровней логирования: Trace, Debug, Info, Warning, Error и Critical.
Каждый класс представляет определенный уровень серьезности сообщений журнала.

Copyright 2025 kichiro-kun (Kei)
Apache license, version 2.0 (Apache-2.0 license)
"""

__all__: list[str] = [
    'InfoLogEntry',
    'WarningLogEntry',
    'ErrorLogEntry',
    'CriticalLogEntry',
    'DebugLogEntry',
    'TraceLogEntry'
]

__author__ = 'kichiro-kun (Kei)'
__version__ = '1.1.0'

# ========================================================================================
from typing import Literal

from ..abstract.log_entry_dto import LogEntryDTO


# _______________________________________________________________________________________
class InfoLogEntry(LogEntryDTO):
    """
    Конкретная реализация LogEntryDTO для информационных записей журнала.

    Этот класс представляет записи журнала с уровнем серьезности "Info", используемые
    для общих информационных сообщений, которые отслеживают нормальный поток выполнения
    приложения и операции.

    Характеристики уровня Info:
    - Информационные сообщения о нормальной работе приложения
    - Подтверждение успешного выполнения операций
    - Общая информация о состоянии системы
    """

    def get_level(self) -> Literal['Info']:
        """
        Получить уровень журналирования для информационных записей.

        Returns:
            str: Всегда возвращает "Info" для идентификации как информационной записи журнала.
        """
        return 'Info'


# _______________________________________________________________________________________
class WarningLogEntry(LogEntryDTO):
    """
    Конкретная реализация LogEntryDTO для предупреждающих записей журнала.

    Этот класс представляет записи журнала с уровнем серьезности "Warning", используемые
    для сообщений, которые указывают на потенциальные проблемы или неожиданные условия,
    которые не препятствуют продолжению работы приложения, но могут потребовать внимания.

    Характеристики уровня Warning:
    - Потенциальные проблемы, которые могут привести к ошибкам
    - Неожиданные условия, обработанные корректно
    - Устаревшие функции или методы
    - Ситуации, требующие внимания
    """

    def get_level(self) -> Literal['Warning']:
        """
        Получить уровень журналирования для предупреждающих записей.

        Returns:
            str: Всегда возвращает "Warning" для идентификации как предупреждающей записи журнала.
        """
        return 'Warning'


# _______________________________________________________________________________________
class ErrorLogEntry(LogEntryDTO):
    """
    Конкретная реализация LogEntryDTO для записей журнала об ошибках.

    Этот класс представляет записи журнала с уровнем серьезности "Error", используемые
    для сообщений, которые указывают на значительные проблемы или сбои, преп��тствующие
    нормальной работе, но не обязательно приводящие к завершению работы приложения.

    Характеристики уровня Error:
    - Ошибки, препятствующие выполнению операций
    - Исключения, которые были перехвачены и обработаны
    - Сбои в работе отдельных компонентов
    - Проблемы, требующие немедленного внимания
    """

    def get_level(self) -> Literal['Error']:
        """
        Получить уровень журналирования для записей об ошибках.

        Returns:
            str: Всегда возвращает "Error" для идентификации как записи журнала об ошибке.
        """
        return 'Error'


# _______________________________________________________________________________________
class CriticalLogEntry(LogEntryDTO):
    """
    Конкретная реализация LogEntryDTO для критических записей журнала.

    Этот класс представляет записи журнала с уровнем серьезности "Critical", используемые
    для сообщений, которые указывают на серьезные ошибки или сбои, которые могут привести
    к завершению работы приложения или сделать его полностью непригодным для использования.

    Характеристики уровня Critical:
    - Критические ошибки, угрожающие стабильности системы
    - Сбои, которые могут привести к остановке приложения
    - Проблемы безопасности и целостности данных
    - Ситуации, требующие экстренного вмешательства
    """

    def get_level(self) -> Literal['Critical']:
        """
        Получить уровень журналирования для критических записей.

        Returns:
            str: Всегда возвращает "Critical" для идентификации как критической записи журнала.
        """
        return 'Critical'


# _______________________________________________________________________________________
class DebugLogEntry(LogEntryDTO):
    """
    Конкретная реализация LogEntryDTO для отладочных записей журнала.

    Этот класс представляет записи журнала с уровнем серьезности "Debug", используемые
    для детальных диагностических сообщений, которые помогают разработчикам отслеживать
    выполнение кода и выявлять проблемы во время разработки и тестирования.

    Характеристики уровня Debug:
    - Подробная информация о выполнении программы
    - Значения переменных и состояние объектов
    - Промежуточные результаты вычислений
    """

    def get_level(self) -> Literal['Debug']:
        """
        Получить уровень журналирования для отладочных записей.

        Returns:
            str: Всегда возвращает "Debug" для идентификации как отладочной записи журнала.
        """
        return 'Debug'


# _______________________________________________________________________________________
class TraceLogEntry(LogEntryDTO):
    """
    Конкретная реализация LogEntryDTO для трассировочных записей журнала.

    Этот класс представляет записи журнала с уровнем серьезности "Trace", используемые
    для самых детальных диагностических сообщений, которые отслеживают каждый шаг
    выполнения программы. Это самый низкий и подробный уровень логирования.

    Характеристики уровня Trace:
    - Максимально детальная трассировка выполнения
    - Входы и выходы из каждой функции
    - Пошаговое выполнение алгоритмов
    - Используется только для глубокой отладки сложных проблем
    """

    def get_level(self) -> Literal['Trace']:
        """
        Получить уровень журналирования для трассировочных записей.

        Returns:
            str: Всегда возвращает "Trace" для идентификации как трассировочной записи журнала.
        """
        return 'Trace'
